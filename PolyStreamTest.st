'From Squeak5.1 of 5 September 2016 [latest update: #16549] on 3 November 2017 at 3:57:34 pm'!TestCase subclass: #PolyStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1-Tests'!!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/2/2017 22:19'!setUp	^0! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/2/2017 22:20'!tearDown	^0! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 13:29'!testAddCoeffExp	| ps psValue |	ps := PolyStream new.	ps addCoef: 1 withExp: 2.   " ps = x^2 "	psValue := ps eval: 1.	self assert: (psValue == 1).	psValue := ps eval: 2.	self assert: (psValue == 4).	psValue := ps eval: 0.	self assert: (psValue == 0).			ps addCoef: 1 withExp: 0.  " ps = x^2 + 1"	psValue := ps eval: 1.	self assert: (psValue == 2).	psValue := ps eval: 2.	self assert: (psValue == 5).	psValue := ps eval: 0.	self assert: (psValue == 1).		! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 13:40'!testAddPolyStreams	| ps ps2 psValue  tmp |	ps := PolyStream new.	ps addCoef: 1 withExp: 2.   " ps = x^2 "	ps addCoef: 1 withExp: 0.   " ps = x^2 + 1 "	ps multiplyBy: 3.                " ps = 3x^2 + 3 "		ps2 := PolyStream new.	ps2 addCoef: 2 withExp: 3.  " ps2 = 2x^3 "	ps2 addCoef: 7 withExp: 0.  " ps2 = 2x^3 + 7 "	ps add: ps2.                        " ps2 = 2x^3 + 3x^2 + 10 "	tmp := ps block value.		psValue := ps eval: 0.	self assert: (psValue == 10).	psValue := ps eval: 1.	self assert: (psValue == 15).	psValue := ps eval: 2.	self assert: (psValue == 38).	"check also that ps2 didn't changed"	psValue := ps2 eval: 0.	self assert: (psValue == 7).! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 13:49'!testBlockType	| ps  |	ps := PolyStream new.	self assert: ((ps block) isKindOf: BlockClosure).	ps addCoef: 1 withExp: 2.	self assert: ((ps block) isKindOf: BlockClosure).	ps multiplyBy: 3. 	self assert: ((ps block) isKindOf: BlockClosure).		! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 13:28'!testCreateAsZero	| ps psValue |	ps := PolyStream new.	psValue := ps eval: 0.	self assert: (psValue == 0).	psValue := ps eval: 1.	self assert: (psValue == 0).	psValue := ps eval: 10000.	self assert: (psValue == 0).			! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 14:02'!testFilter	| ps set psValue  tmp |	ps := PolyStream new.	ps addCoef: 1 withExp: 0.  	ps addCoef: 1 withExp: 1.  	ps addCoef: 1 withExp: 2.  	ps addCoef: 1 withExp: 3.  	ps addCoef: 1 withExp: 4.  	ps addCoef: 1 withExp: 5.  " ps = x^5 + x^4 + x^3 + x^2 + x + 1"	set := Set new.	set addAll: #(1 3 5 7). 		ps filter: set.                     " ps =  x^4 + x^2 + 1 "	tmp := ps block value.		psValue := ps eval: 0.	self assert: (psValue == 1).	psValue := ps eval: 1.	self assert: (psValue == 3).	psValue := ps eval: 2.	self assert: (psValue == 21).			" try to change set and check again "		set addAll: #(0 2 4).	psValue := ps eval: 0.	self assert: (psValue == 1).	psValue := ps eval: 1.	self assert: (psValue == 3).	psValue := ps eval: 2.	self assert: (psValue == 21).		set removeAll: #(1 3 5 7).	psValue := ps eval: 0.	self assert: (psValue == 1).	psValue := ps eval: 1.	self assert: (psValue == 3).	psValue := ps eval: 2.	self assert: (psValue == 21).		! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 14:42'!testIntersectionGuess	| b ps ps2  |	ps := PolyStream new.	ps addCoef: -1 withExp: 2.  	ps addCoef: 6 withExp: 0.   " ps = -x^2 + 6 "			ps2 := PolyStream new.	ps2 addCoef: -1 withExp: 1.  " ps2 = -x "		" uncomment, when have a way to test it "	b := []. " to get rid of 'unused' warnings "	"	b := ps intersectionWith: ps2 withinRange: 2.	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).		b := ps intersectionWith: ps2 withinRange: 1.	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).	Transcript show: (b value).	"	! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 13:28'!testMultiply	| ps psValue  tmp |	ps := PolyStream new.	ps addCoef: 1 withExp: 2.   " ps = x^2 "	ps addCoef: 1 withExp: 0.   " ps = x^2 + 1"	ps multiplyBy: 3.                " ps = 3x^2 + 3"		tmp := ps block value.	psValue := ps eval: 0.	self assert: (psValue == 3).	psValue := ps eval: 1.	self assert: (psValue == 6).	psValue := ps eval: 2.	self assert: (psValue == 15).! !!PolyStreamTest methodsFor: 'testing' stamp: 'LP 11/3/2017 15:56'!testSubstitute	| ps psValue  tmp |	ps := PolyStream new.	ps addCoef: 2 withExp: 0.   	ps addCoef: 1 withExp: 1.  	ps addCoef: 2 withExp: 2.   " ps = 2x^2 + x + 2 "		      ps substitute: 2.                 " ps = 2(2x)^2 + (2x) + 2 = 8x^2 + 2x + 2"	tmp := ps block value.		psValue := ps eval: 0.	self assert: (psValue == 2).	psValue := ps eval: 1.	self assert: (psValue == 12).	psValue := ps eval: 2.	self assert: (psValue == 38).		ps substitute: 2.                 " ps = 8(2x)^2 + 2(2x) + 2 = 32x^2 + 4x + 2"	tmp := ps block value.		psValue := ps eval: 0.	self assert: (psValue == 2).	psValue := ps eval: 1.	self assert: (psValue == 38).	psValue := ps eval: 2.	self assert: (psValue == 138).! !