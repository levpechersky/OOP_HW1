'From Squeak5.1 of 5 September 2016 [latest update: #16549] on 3 November 2017 at 5:17:45 pm'!Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'initialize-release' stamp: 'AS 11/2/2017 11:40'!initialize	"Creates a new polynom as 0."	monoms := Dictionary new.	^self! !!Polynom methodsFor: 'properties' stamp: 'AS 11/2/2017 23:04'!asDictionary	"Returns polynom as dictionary of pairs of (exp, coef)"	| dict |	dict := Dictionary new.	monoms keysAndValuesDo: [:key :value | dict add: key->value coef].	^dict! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/3/2017 16:43'!add: aPolynom	"Adds another polynom to the current one."		| temp mon1 |	(aPolynom isMemberOf: Polynom)	ifFalse: [ self error: 'invalid input' ].	temp := aPolynom asDictionary.	temp keysAndValuesDo: [:key :value | 									mon1 := Monom new.									mon1 exp: key ; coef: value.									self addMonom: mon1. ].	temp := self asDictionary.! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/3/2017 16:55'!addMonom: aMonom	"Adds a single monom to this polynom."	| mon_res coef1 coef2 exp2 |	(aMonom isMemberOf: Monom)	ifFalse: [ self error: 'invalid input' ].	coef2 := aMonom coef.	exp2 := aMonom exp.	mon_res := Monom new.	mon_res exp: exp2 ; coef: coef2.	(monoms includesKey: exp2)	"If exp exists, get info from current monom, update, remove and reinsert"	ifTrue: [coef1 := (monoms at: exp2) coef.			mon_res exp: exp2 ; coef: (coef1 + coef2).			monoms removeKey: exp2.			(mon_res coef = 0) ifFalse: [monoms add: (exp2->mon_res). ] ]	"If exp does not exist, insert a new monom."	ifFalse: [ monoms add: (exp2->mon_res) ]! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/3/2017 17:09'!eval: anInteger	"Evaluates this polynom at the given integer."	| sum |	(anInteger isInteger)	ifFalse: [ self error: 'invalid input' ].	sum := 0.	monoms valuesDo: [:value | 		sum := (sum + ((value coef) * (anInteger raisedToInteger: (value exp)))) ].	^sum! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/3/2017 17:16'!multiplyByMonom: aMonom	"Multiplies the current polynom by a single monom."	| coef1 coef2 temp_coef exp1 exp2 temp_exp mon_new dict |	(aMonom isMemberOf: Monom)	ifFalse: [ self error: 'invalid input' ].	coef2 := aMonom coef.	exp2 := aMonom exp.	"Multiply all monoms in the polynom."	dict := self asDictionary.	dict keysAndValuesDo: [:key :value | 		exp1 := key. coef1 := value.		temp_coef := (coef1 * coef2).		temp_exp := (exp1 + exp2).		"If new coef (or coef2) is 0, this will remove all monoms."		"Otherwise, this will create a new monom, remove the older, and add the new."		(temp_coef = 0) 			ifTrue: [ self.monoms removeKey: exp1 ]			ifFalse: [mon_new := Monom new.					mon_new coef: temp_coef ; exp: temp_exp.					self.monoms removeKey: exp1.					self.monoms add: (temp_exp->mon_new).].		]! !!Polynom methodsFor: 'calculus' stamp: 'AS 11/3/2017 13:01'!derivative	"Returns a polynom that is the derivative of the current one."	| derive |	derive := Polynom new.	monoms valuesDo: [:value | 		(value derivative coef = 0) ifFalse: [derive addMonom: (value derivative)]].	^derive	! !