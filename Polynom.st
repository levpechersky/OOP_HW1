'From Squeak5.1 of 5 September 2016 [latest update: #16549] on 2 November 2017 at 12:42:24 pm'!Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'initialize-release' stamp: 'AS 11/2/2017 11:40'!initialize	"Creates a new polynom as 0."	monoms := Dictionary new.	^self! !!Polynom methodsFor: 'properties' stamp: 'AS 11/2/2017 11:40'!asDictionary	"Returns polynom as dictionary of pairs of (exp, coef)"	| dict |	dict := Dictionary new.	monoms keysAndValuesDo: [:key :value | dict add: (key, value coef)].	^dict! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/2/2017 12:19'!add: aPolynom	"Adds another polynom to the current one."	(aPolynom isMemberOf: Polynom)	ifFalse: [ self error: 'invalid input' ].	aPolynom.monoms valuesDo: [:value | self addMonom: value].! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/2/2017 11:39'!addMonom: aMonom	"comment stating purpose of message"	| mon_res coef1 coef2 exp2 |	(aMonom isMemberOf: Monom)	ifFalse: [ self error: 'invalid input' ].	coef2 := aMonom coef.	exp2 := aMonom exp.	mon_res := Monom new.	mon_res exp: exp2 ; coef: coef2.	(monoms scanFor: exp2)	"If exp exists, get info from current monom, update, remove and reinsert"	ifTrue: [coef1 := (monoms at: exp2) coef.			mon_res exp: exp2 ; coef: coef1 + coef2.			monoms removeAt: exp2.			monoms add: (exp2, mon_res). ]	"If exp does not exist, insert a new monom."	ifFalse: [ monoms add: (exp2, mon_res) ]! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/2/2017 12:16'!eval: anInteger	"comment stating purpose of message"	| sum |	(anInteger isInteger)	ifFalse: [ self error: 'invalid input' ].	sum := 0.	monoms valuesDo: [:value | 		sum := sum + value coef * anInteger raisedToInteger: value exp].	^sum! !!Polynom methodsFor: 'algebra' stamp: 'AS 11/2/2017 12:42'!multiplyByMonom: aMonom	"Multiplies the current polynom by a single monom."	| coef1 coef2 temp_coef exp1 exp2 temp_exp mon_new |	(aMonom isMemberOf: Monom)	ifFalse: [ self error: 'invalid input' ].	coef2 := aMonom coef.	exp2 := aMonom exp.	"Multiply all monoms in the polynom."	monoms keysAndValuesDo: [:key :value | 		exp1 := key. coef1 := value coef.		temp_coef := coef1 * coef2.		temp_exp := exp1 + exp2.		"If new coef (or coef2) is 0, this will remove all monoms."		"Otherwise, this will create a new monom, remove the older, and add the new."		(temp_coef = 0) 			ifTrue: [ monoms removeAt: exp1 ]			ifFalse: [mon_new := Monom new.					mon_new coef: temp_coef ; exp: temp_exp.					monoms removeAt: exp1.					monoms add: (temp_exp, mon_new)].		]! !!Polynom methodsFor: 'calculus' stamp: 'AS 11/2/2017 12:10'!derivative	"Returns a polynom that is the derivative of the current one."	| derive |	derive := Polynom new.	monoms valuesDo: [:value | 		(value derivative coef = 0) ifFalse: [derive addMonom: (value derivative)]].	! !